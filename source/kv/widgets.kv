<SkillItem>:
    orientation: 'horizontal'
    spacing: 5
    name: ""
    time: 0
    description: ""
    item_id: 0
    importance: 0
    Label:
        text: root.name
        text_size: self.size
        halign: 'center'
        valign: 'center'
    ColoredIndicator:
        size_hint: 0.1, 1
        val: root.importance
    Label:
        text: str(round(root.time, 2))
        size_hint: 0.1, 1

<TaskItem>:
    orientation: 'horizontal'
    spacing: 5
    name: ""
    time: 0
    description: ""
    item_id: 0
    expected_average_speed: 0
    Label:
        text: root.name
        text_size: self.size
        halign: 'center'
        valign: 'center'
    ColoredIndicator:
        size_hint: 0.1, 1
        val: min(root.expected_average_speed / 4, 1)
    Label:
        text: str(round(root.time, 2))
        size_hint: 0.1, 1


<Timer>:
    orientation: 'vertical'
    timer: _timer
    play_button: _play_button
    Label:
        id: _timer
        text: "Timer"
    BoxLayout:
        orientation: 'horizontal'
        spacing: 5
        Label:
        Button:
            id: _play_button
            size_hint: (None, 1)
            width: self.height
            background_normal: 'source/res/play.png'
            background_down: 'source/res/play_active.png'
            border: (0, 0, 0, 0)
            on_press: root.start()
        Button:
            size_hint: (None, 1)
            width: self.height
            background_normal: 'source/res/stop.png'
            background_down: 'source/res/stop_active.png'
            border: (0, 0, 0, 0)
            on_press: root.finish()
        Label:


<ColoredIndicator>:
    canvas.after:
        Color:
            hsv: self.byr_colormap(self.val)
        Rectangle:
            size: min(self.size[0], self.size[1]) , min(self.size[0], self.size[1])
            pos: self.pos[0], self.center_y - min(self.size[0], self.size[1])/2

<ImportanceSlider>:
    min: 0
    max: 1
    step: 0.05
    value: 0.5
    orientation: "horizontal"
    value_track: True

<Node>:
    pos_hint: None, None
    color: 0, 0, 0, 1
    handle_height: 20
    text_size: self.size
    halign: "center"
    valign: "center"
    canvas.before:
        RoundedRectangle:
            pos: self.x, self.y
            size: self.width, self.height - self.handle_height
            radius: [(0, 0), (0, 0), (10, 10), (10, 10)]
        Color:
            hsv: self.h_color
        RoundedRectangle:
            pos: self.x, self.y + self.height - self.handle_height
            size: self.width, self.handle_height
            radius: [(10, 10), (10, 10), (0, 0), (0, 0)]


<ConnectBubble>:
    orientation: "vertical"
    BubbleButton:
        text: "direction"
        on_press: root.connection.direction = (root.connection.direction + 1) % 3
    Label:
        text: "strength " + str(round(_slider.value, 1))
    Slider:
        id: _slider
        max: 1
        min: 0
        step: 0.1
        cursor_size: (15, 15)
        on_value: root.connection.strength = self.value
    BubbleButton:
        text: "remove"
        on_press:
            root.connection.node1.connected.remove(root.connection.node2)
            root.connection.node1.connections.remove(root.connection)
            root.connection.node2.connected.remove(root.connection.node1)
            root.connection.node2.connections.remove(root.connection)
            root.parent.remove_widget(root.connection)
            root.parent.remove_widget(root)

<NodeBubble>:
    orientation: "vertical"
    BubbleButton:
        text: "connect"
        on_press:
            root.node.state = "connect"
            root.node.bubble = None
            root.parent.remove_widget(root)
    BubbleButton:
        text: "remove"
        on_press:
            root.remove_node()


<Handle>:
    canvas.before:
        Color:
            hsv: 0.1, 0.8, 0.8
        Rectangle:
            pos: self.pos
            size: self.size

<NodeItem>:
    name: "name"
    group: "group"
    text: self.group + '/' + self.name
    text_size: self.size
    halign: "center"
    valign: "center"

<NodesView>:
    bar_width: 5
    scroll_type: ["bars", "content"]
    RecycleBoxLayout:
        default_size: None, dp(56)
        default_size_hint: 1, None
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        spacing: 5

<ApplyButton>:
    size_hint_x: None
    width: self.height
    background_normal: 'source/res/apply.png'
    background_down: 'source/res/apply_active.png'
    border: (0, 0, 0, 0)
